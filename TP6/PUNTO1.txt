#include<bits/stdc++.h>
using namespace std;

// definicion del nodo
typedef struct tnodo* pnodo;

struct tnodo {
	int dato;
	pnodo sig;
	pnodo ant;
};

// a
void IniciarLista(pnodo &inicio) {
	inicio = NULL;
}

// b
void CrearNodo(pnodo &nuevo, int valor) {
	nuevo = new tnodo;
	if (nuevo != NULL) {
		nuevo->dato = valor;
		nuevo->sig = NULL;
		nuevo->ant = NULL;
	}
}

// c
void AgregarInicio(pnodo &inicio, pnodo nuevo) {
	if (inicio == NULL) {
		inicio = nuevo;
	} else {
		nuevo->sig = inicio;
		inicio->ant = nuevo;
		inicio = nuevo;
	}
}

// d
void AgregarFinal(pnodo &inicio, pnodo nuevo) {
	pnodo i;
	if (inicio == NULL) {
		inicio = nuevo;
	} else {
		for (i = inicio; i->sig != NULL; i = i->sig);
		i->sig = nuevo;
		nuevo->ant = i;
	}
}

// e
void AgregarOrden(pnodo &inicio, pnodo nuevo) {
	pnodo i;
	if (inicio == NULL) {
		inicio = nuevo;
	} else if (nuevo->dato < inicio->dato) {
		nuevo->sig = inicio;
		inicio->ant = nuevo;
		inicio = nuevo;
	} else {
		for (i = inicio; i->sig != NULL && i->sig->dato < nuevo->dato; i = i->sig);
		nuevo->sig = i->sig;
		nuevo->ant = i;
		if (i->sig != NULL) i->sig->ant = nuevo;
		i->sig = nuevo;
	}
}

// f
pnodo QuitarInicio(pnodo &inicio) {
	pnodo extraido = NULL;
	if (inicio != NULL) {
		extraido = inicio;
		if (inicio->sig == NULL) {
			inicio = NULL;
		} else {
			inicio = inicio->sig;
			inicio->ant = NULL;
			extraido->sig = NULL;
		}
	}
	return extraido;
}

// g
pnodo QuitarFinal(pnodo &inicio) {
	pnodo extraido = NULL, i;
	if (inicio != NULL) {
		for (i = inicio; i->sig != NULL; i = i->sig);
		extraido = i;
		if (i->ant != NULL)
			i->ant->sig = NULL;
		else
			inicio = NULL;
		i->ant = NULL;
	}
	return extraido;
}

// h
pnodo QuitarNodo(pnodo &inicio, int valor) {
	pnodo extraido = NULL, i;
	if (inicio != NULL) {
		if (inicio->dato == valor) {
			extraido = inicio;
			inicio = inicio->sig;
			if (inicio != NULL) inicio->ant = NULL;
			extraido->sig = NULL;
		} else {
			for (i = inicio; i != NULL && i->dato != valor; i = i->sig);
			if (i != NULL) {
				extraido = i;
				if (i->ant != NULL) i->ant->sig = i->sig;
				if (i->sig != NULL) i->sig->ant = i->ant;
				i->sig = NULL;
				i->ant = NULL;
			}
		}
	}
	return extraido;
}

// i
bool BuscarNodo(pnodo inicio, int valor) {
	for (pnodo i = inicio; i != NULL; i = i->sig) {
		if (i->dato == valor) return true;
	}
	return false;
}

void MostrarLista(pnodo inicio) {
	if (inicio == NULL) {
		cout << "La lista está vacía.\n";
	} else {
		cout << "Contenido de la lista:\n";
		for (pnodo i = inicio; i != NULL; i = i->sig) {
			cout << i->dato << " ";
		}
		cout << endl;
	}
}

int main() {
	pnodo lista;
	IniciarLista(lista);
	
	pnodo n1; CrearNodo(n1, 10); AgregarInicio(lista, n1);
	pnodo n2; CrearNodo(n2, 30); AgregarFinal(lista, n2);
	pnodo n3; CrearNodo(n3, 20); AgregarOrden(lista, n3);
	pnodo n4; CrearNodo(n4, 25); AgregarOrden(lista, n4);
	
	MostrarLista(lista);
	
	cout << "\nBuscando 20: " << (BuscarNodo(lista, 20) ? "Encontrado" : "No encontrado") << endl;
	
	pnodo eliminado = QuitarNodo(lista, 20);
	delete eliminado;
	
	MostrarLista(lista);
	
	delete QuitarInicio(lista);
	delete QuitarFinal(lista);
	
	MostrarLista(lista);
	
	return 0;
}
